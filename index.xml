<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes Workshop on kubernetes workshop</title>
    <link>https://unixdaddy.github.io/kubernetes-workshop-source/</link>
    <description>Recent content in Kubernetes Workshop on kubernetes workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://unixdaddy.github.io/kubernetes-workshop-source/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/10_introduction/10_introduction.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/10_introduction/10_introduction.html</guid>
      <description>What you need to know Some of the components that you will be working on are shown in this diagram
The CKA exam will test your knowledge of these components and their relationships - it is hands-on
It is all about being fast and accurate
You will be tested on (in no particular order)&amp;hellip;..
 Nodes Pods Containers RBAC Services (Networking) Persistent volumes and claims Cluster Management Troubleshooting etc&amp;hellip;.  </description>
    </item>
    
    <item>
      <title>Pods</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/10_lab1.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/10_lab1.html</guid>
      <description>Challenge Use kubectl to
 Create a pod using image &amp;lsquo;sirfragalot/docker-demo:dcus&amp;rsquo; called lab1 Describe the pod Get pod events Access the webpage running on port 8080 in the container  using the internal IP using port forwarding   Use a filter command to show only this pod   Which node is this pod running on?
    Expand here to see the solution   Solution  doc reference</description>
    </item>
    
    <item>
      <title>TBC</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/50_cluster/10_lab7.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/50_cluster/10_lab7.html</guid>
      <description>Challenge TBC   Expand here to see the solution   Solution  doc reference
 TBC    </description>
    </item>
    
    <item>
      <title>TBC</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/60_networking/10_lab9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/60_networking/10_lab9.html</guid>
      <description>Challenge TBC   Expand here to see the solution   Solution  doc reference
 TBC    </description>
    </item>
    
    <item>
      <title>TBC</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/70_storage/10_lab11.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/70_storage/10_lab11.html</guid>
      <description>Challenge TBC   Expand here to see the solution   Solution  doc reference
 TBC    </description>
    </item>
    
    <item>
      <title>TBC</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/80_trouble/10_lab11.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/80_trouble/10_lab11.html</guid>
      <description>Challenge TBC   Expand here to see the solution   Solution  doc reference
 TBC    </description>
    </item>
    
    <item>
      <title>Using Services</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/30_services/10_lab3.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/30_services/10_lab3.html</guid>
      <description>Challenge Use kubectl to
 Create a service to expose your deployment from the previous challenge Access the service internally from the cluster Access the service externally from the cluster Describe services     Expand here to see the solution   Solution  doc reference
 kubectl expose deployment lab2 --name=lab2-svc --port=80 --target-port=8080 kubectl run -it --image=busybox bash / # wget lab2-svc kubectl expose deployment lab2 --name=lab2-np --type=NodePort --port=8080 kubectl get svc lab2-np curl ifconfig.</description>
    </item>
    
    <item>
      <title>Managing Deployments</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/20_lab2.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/20_lab2.html</guid>
      <description>Challenge Use kubectl to
 Create a deployment called lab2  image &amp;lsquo;sirfragalot/docker-demo:dcus&amp;rsquo; one pod   Scale up to 5 pods Scale back down to 1 pod Rolling update to use image nginx instead (tracking changes) View the revision history Roll back to the previous image View the deployment image     Expand here to see the solution   Solution  doc reference
 kubectl create deployment lab2 --image=sirfragalot/docker-demo:dcus \  --dry-run=client -o yaml | tee lab2.</description>
    </item>
    
    <item>
      <title>NodePort Service</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/30_services/20_lab4.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/30_services/20_lab4.html</guid>
      <description>Challenge Use kubectl to create a namespace {yourname} and deploy the below into that namespace:
 Deployment  Image = sirfragalot/docker-demo:dcus (listens on port 8080) Replicas = 3 Service Type = NodePort       Expand here to see the solution   Solution  doc reference
 kubectl create namespace yourname kubectl -n yourname create deployment lab4 --image=sirfragalot/docker-demo:dcus --replicas=3 --port=8080 kubectl -n yourname expose deployment lab4 --type=NodePort kubectl -n yourname get svc curl localhost:31xxx  when you specify the &amp;lsquo;&amp;ndash;port&amp;rsquo; in create deployment this is only metadata - a hint that is used for the service to understand which target port to map to.</description>
    </item>
    
    <item>
      <title>Our People</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/10_introduction/20_people.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/10_introduction/20_people.html</guid>
      <description>Add page Markdown content here&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>Pods and Deployments</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/30_lab3.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/30_lab3.html</guid>
      <description>Challenge Use kubectl to
 Create a pod called pod-1  image &amp;lsquo;nginx&amp;rsquo;   Create a pod called redis  image &amp;lsquo;redis:1.99&amp;rsquo; identify the problem with the pod rectify the problem with the pod   Create a deployment called busybox-1  image &amp;lsquo;busybox&amp;rsquo; with 3 replicas and commmand sleep 3600   Update the deployment called busybox-1  image ubuntu     It is bad practice not to specify the image tag (as it will default to &amp;lsquo;latest&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>Deploying to a Namespace</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/40_lab4.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/40_lab4.html</guid>
      <description>Challenge Deploy a pod named web in the namespace cka1 using the image nginx:1.16.0
   Expand here to see the solution   Solution  doc reference
 kubectl create namespace cka1 kubectl run web --image=nginx:1.16.0    </description>
    </item>
    
    <item>
      <title>Querying Resources</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/50_lab5.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/50_lab5.html</guid>
      <description>Challenge Deploy a deployment named cache using the image memcached with 3 replicas
 Expose the deployment on a port on the host (NodePort) that sends to port 11211 of the pod. Output the endpoints in json format to q3.json Tracking changes, scale the deployment to 5 replicas Output the history of this deployment to a file called q3.txt     Expand here to see the solution   Solution  doc reference</description>
    </item>
    
    <item>
      <title>Labels</title>
      <link>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/60_lab6.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unixdaddy.github.io/kubernetes-workshop-source/20_pods_deployments/60_lab6.html</guid>
      <description>Challenge Create a namespace called accounts all the following steps need to be done in this namespace
Deploy a deployment named redis-app using the image redis with 2 replicas
 with labels tier=prod and loc=north  Deploy a deployment named redis-db using the image redis:alpine with 2 replicas
 with labels tier=prod and loc=south Expose the redis-db deployment on a port 6379.  Use labels to query the pods
 list pod with label tier=prod list pods with label loc=south  Alter deployment redis-app</description>
    </item>
    
  </channel>
</rss>
